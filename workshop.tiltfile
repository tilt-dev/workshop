# Code generated by Tilt tutorial-generator (https://github.com/tilt-dev/workshop). DO NOT EDIT.


def step_scripts():
    return {'1-step.sh': 'printf \'\n= - = - = - = - = - = - = - = - =\n\'\n\nprintf \'\n\\033[32mUpdate Code\\033[0m\n\nTilt handles updating the running servers for you.\nLive update does in-place updates of containers without requiring an image build.\n\nLet\'"\'"\'s make a small change to one of the services to see this working.\n\nIn the file `sample-app.sh`, change "Hello Tilt" to "Hello World".\n\n\'\n\n', '2-step.sh': 'printf \'\n= - = - = - = - = - = - = - = - =\n\'\n\nprintf "Preparing the next step...hang tight!\n\n"\n/usr/bin/env bash "$TILT_WORKSHOP_TMPDIR/2-prepare.sh" >/dev/null\n\nprintf \'\n\\033[32mFix Error\\033[0m\n\nTilt shows you any errors during build/update and deploy across your services.\n\nThis workshop introduced an error in one of your services.\n\nUse Tilt\'"\'"\'s UI to find the failed service and fix it.\n\n\'\n\n/usr/bin/env bash "$TILT_WORKSHOP_TMPDIR/2-check.sh"\n\n', '3-step.sh': 'printf \'\n= - = - = - = - = - = - = - = - =\n\'\n\nprintf "Preparing the next step...hang tight!\n\n"\n/usr/bin/env bash "$TILT_WORKSHOP_TMPDIR/3-prepare.sh" >/dev/null\n\nprintf \'\n\\033[32mButtons\\033[0m\n\nTilt supports per-resource buttons that can execute a local command for common tasks.\nFor example, a button could run a lint/format tool or reset a development DB to a clean state.\n\nA button was just added to the \'"\'"\'my-app\'"\'"\' resource with the text \'"\'"\'Click me!\'"\'"\'.\n\nFind it and click it, then return here.\n(Don\'"\'"\'t worry - it won\'"\'"\'t actually run any code when clicked!)\n\n\'\n\n/usr/bin/env bash "$TILT_WORKSHOP_TMPDIR/3-check.sh"\n\n', '4-step.sh': 'printf \'\n= - = - = - = - = - = - = - = - =\n\'\n\nprintf \'\nYou\'"\'"\'ve reached the end!\n\nWe hope this brief Tilt workshop was helpful.\n\n\'\n\n'}

def extra_scripts():
    return {'api-check.sh': '#!/usr/bin/env bash\n\n# set -x\n\nKIND="${1}"\nNAME="${2}"\nAPI_PATH="${3}"\nEXPECTED="${4}"\n\nTILT_BIN="${TILT_BIN:-tilt}"\n\n# portable ISO8601 for macOS + Linux (no fractional seconds is fine for our purposes)\nnow=$(date -u +"%Y-%m-%dT%H:%M:%S.000000Z")\n\nprintf "Waiting for \'%s\' to be updated...\\n\\n" "${NAME}"\n\nlastValue=""\nwhile IFS= read -r -d~ value;\ndo\n  if [[ ${EXPECTED} == "after_now" ]]; then\n    if [[ ${value} != "<nil>" ]] && [[ ${value} > "${now}" ]]; then\n      break\n    fi\n  else\n    if [[ ${value} == "${EXPECTED}" ]]; then\n        break\n    elif [[ ${value} != "${lastValue}" ]]; then\n        echo "Current ${API_PATH}: ${value} (desired: ${EXPECTED})"\n        lastValue="${value}"\n    fi\n  fi\ndone < <("${TILT_BIN}" get --watch "${KIND}" "${NAME}" -o=jsonpath="{${API_PATH}}{\\"~\\"}")\n\nprintf "\\nYou did it! Click Tutorial: Next Step to move on.\\n"\n', 'welcome.sh': 'printf \'\n\n\\033[32mWelcome to the Tilt Workshop!\\033[0m\n\nWe\'"\'"\'ll walk you through starting up your services and understanding some basics.\n\n\nTo get started, click "Tutorial: Next Step".\n\nYou can always return to the beginning with "Tutorial: Reset".\n\'\n', 'reset.sh': '# if any of the prepare scripts modify the environment, this is the place to undo them :)\n\nTILT_BIN="${TILT_BIN:-tilt}"\n\nsed -i \'\' -e \'s/hzzp/http/\' ./sample-app.sh\n\n"${TILT_BIN}" delete --ignore-not-found uibutton "workshop-example-button"\n', '2-prepare.sh': 'sed -i \'\' -e \'s/http/hzzp/\' ./sample-app.sh\n\n# wait for the resource to be in the \'error\' state before moving on...\n\nNAME="my-app"\nKIND="uiresource"\n# change to .status.updateStatus for build/update\nAPI_PATH=".status.runtimeStatus"\nVALUE="error"\n\n/usr/bin/env bash "${TILT_WORKSHOP_TMPDIR}/api-check.sh" "${KIND}" "${NAME}" "${API_PATH}" "${VALUE}" >/dev/null\n', '2-check.sh': 'NAME="my-app"\nKIND="uiresource"\n# change to .status.updateStatus for build/update\nAPI_PATH=".status.runtimeStatus"\nVALUE="ok"\n\n/usr/bin/env bash "${TILT_WORKSHOP_TMPDIR}/api-check.sh" "${KIND}" "${NAME}" "${API_PATH}" "${VALUE}"\n', '3-prepare.sh': 'RESOURCE="my-app"\n\nbutton=$(cat << EOF\napiVersion: tilt.dev/v1alpha1\nkind: UIButton\nmetadata:\n  annotations:\n    tilt.dev/resource: ${RESOURCE}\n  name: workshop-example-button\nspec:\n  iconName: pets\n  location:\n    componentID: ${RESOURCE}\n    componentType: Resource\n  text: Click me!\nEOF\n)\n\nTILT_BIN="${TILT_BIN:-tilt}"\n\necho "${button}" | "${TILT_BIN}" apply -f -\n', '3-check.sh': 'NAME="workshop-example-button"\nKIND="uibutton"\nAPI_PATH=".status.lastClickedAt"\n# after_now does a datetime comparison to ensure the field is after now()\nVALUE="after_now"\n\n/usr/bin/env bash "${TILT_WORKSHOP_TMPDIR}/api-check.sh" "${KIND}" "${NAME}" "${API_PATH}" "${VALUE}"\n'}


load('ext://workflow', 'workflow')

def make_tmpdir():
    # TODO(milas): use ConfigMap in Tilt to store this so that we can clean up on `tilt down`
    tmpdir = os.getenv('TILT_WORKSHOP_TMPDIR')
    if not tmpdir:
        tmpdir = str(local('mktemp -d', quiet=False, echo_off=False)).strip()
        os.putenv('TILT_WORKSHOP_TMPDIR', tmpdir)
    return tmpdir


def _write_scripts(out_dir, scripts):
    out_paths = {}
    for name in scripts:
        p = os.path.join(out_dir, name)
        local(
            'echo "$TILT_WORKSHOP_SCRIPT" > {}'.format(p),
            env={'TILT_WORKSHOP_SCRIPT': scripts[name]},
            quiet=True,
            echo_off=True)
        out_paths[name] = p
    return out_paths


def workshop():
    tmpdir = make_tmpdir()
    local_resource('workshop', cmd=['/usr/bin/env', 'bash', os.path.join(tmpdir, 'welcome.sh')])

    extra_paths = _write_scripts(tmpdir, extra_scripts())

    step_cmds = []
    for p in _write_scripts(tmpdir, step_scripts()).values():
        step_cmds.append(['/usr/bin/env', 'bash', shlex.quote(p)])

    reset_cmd = []
    reset_path = extra_paths.get('reset.sh', None)
    if reset_path:
        reset_cmd = ['/usr/bin/env', 'bash', shlex.quote(reset_path)]

    workflow(
        'Tutorial',
        resource_name='workshop',
        work_cmds=step_cmds,
        clear_cmd=reset_cmd
    )

if os.getenv('WORKSHOP'):
    workshop()
